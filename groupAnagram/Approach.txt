# Intuition
Anagaram means the set of strings should have the same frequency of each character. So we can come up with the int values of each caharcter in all the strings that array should be same for all the Strings in order to become the anagrams.

# Approach
first calculating the frequency of each character as we have 26 alphabets we consider the array of size 26 and store the frequency for all the Strings.
```
int[] count = new int[26];
for(char ch : s.toCharArray()){
    count[ch - 'a']++;
}
```
Then we just build some String from these integer values stored in array by each character seperating with some special character I considered '$' (We all love $ ðŸ˜€).
```
StringBuilder str = new StringBuilder();
for(int x : count){
    str.append(x).append('$');
}
```

We now take a HashMap which stores the key as this string appended as use that as key. And we check if the current string appended value is already present if its not we create a new List<String> or else we just get the already existed list of strings and the current string.
```
if(!m.containsKey(str.toString()))
m.put(str.toString(),new ArrayList<String>());
m.get(str.toString()).add(s);
```

finally as the HashMap values is now our required solution but the we cannot directly return map.values() as that would take the type of Collection<List<String>> but the required return type is List<List<String>> so we while return form a new ArrayList<Strings> and return that.

# Complexity
- Time complexity:
O(n * k) --> where k is the length of largest string and as we calculate the count aarray for all the strings n.

- Space complexity:
O(n * k)